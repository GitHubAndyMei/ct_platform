<%
import re
from template_param import get_camel_style_name
CLASS_NAME = 'tbl_' + TABLE.name.lstrip('t_') #类名
%>
"""
table ${TABLE.name} data model.
"""

import enum
from app.model.base import Base
from sqlalchemy import Column, Integer, SmallInteger, BigInteger, String, JSON, Text

<%
    # 生成字段的枚举类
%>\
%for field in TABLE.fields:
    %if 'enum' in field.comment:
<%
        FIELD_VAR_NAME = field.name.replace('F_','')
        ENUM_CLASS_NAME = 'Enum' + get_camel_style_name(CLASS_NAME+'_'+FIELD_VAR_NAME)
        ENUM_KEY_PRE    = FIELD_VAR_NAME.upper() # 枚举前缀
        if '#' in field.comment:
            ENUM_LIST = field.comment.split('enum:')[1].split('#')
        IS_INT = True if field.data_type in ['tinyint','int','bigint'] else False
%>\
class ${ENUM_CLASS_NAME}(enum.Enum):
        % for node in ENUM_LIST:
<%
            ENUM_NODE_INFO_LIST = node.split(',')
            ENUM_KEY_NAME = ENUM_KEY_PRE+'_'+ENUM_NODE_INFO_LIST[1].upper()
%>\
            %if IS_INT:
    ${ENUM_KEY_NAME} = ${ENUM_NODE_INFO_LIST[0]} # ${ENUM_NODE_INFO_LIST[2]}
            %else:
    ${ENUM_KEY_NAME} = '${ENUM_NODE_INFO_LIST[0]}' # ${ENUM_NODE_INFO_LIST[2]}
            %endif
        % endfor

    @classmethod
        % if IS_INT:
    def get_desc(cls, enum_value: int):
        % else:
    def get_desc(cls, enum_value: str):
        % endif
        '''
        获取${field.comment.split('enum:')[0]}值描述
        '''
        desc_dict = {
        % for node in ENUM_LIST:
<%
            ENUM_NODE_INFO_LIST = node.split(',')
            ENUM_KEY_NAME = ENUM_KEY_PRE+'_'+ENUM_NODE_INFO_LIST[1].upper()
%>\
            %if IS_INT:
            ${ENUM_NODE_INFO_LIST[0]}:'${ENUM_NODE_INFO_LIST[2]}',
            %else:
            '${ENUM_NODE_INFO_LIST[0]}':'${ENUM_NODE_INFO_LIST[2]}',
            %endif
        % endfor
        }

        return desc_dict.get(enum_value, '未知状态')
    %endif
%endfor

<%
    # 生成模型类
%>\
class ${get_camel_style_name(CLASS_NAME)}(Base):
    '''
    ${TABLE.comment}
    '''
    __tablename__ = '${TABLE.name}'

% for field in TABLE.fields:
<%
    FIELD_VAR_NAME = field.name.replace('F_','')
    FIELD_BASE_TYPE = field.data_type.split('(')[0]
%>\
    % if field.is_pk:
    ${FIELD_VAR_NAME} = Column(Integer, name='${field.name}', comment='${field.comment}', primary_key=True, autoincrement=True)
<%continue%>
    % endif
    % if FIELD_BASE_TYPE == 'tinyint':
    ${FIELD_VAR_NAME} = Column(SmallInteger, name='${field.name}', comment='${field.comment}', nullable=False, default=${field.default})
    % elif FIELD_BASE_TYPE == 'int':
    ${FIELD_VAR_NAME} = Column(Integer, name='${field.name}', comment='${field.comment}', nullable=False, default=${field.default})
    % elif FIELD_BASE_TYPE == 'bigint':
    ${FIELD_VAR_NAME} = Column(BigInteger, name='${field.name}', comment='${field.comment}', nullable=False, default=${field.default})
    % elif FIELD_BASE_TYPE == 'varchar':
<%
        string_len = field.data_type.split('(')[1].replace(')', '')
%>\
    ${FIELD_VAR_NAME} = Column(String(${string_len}), name='${field.name}', comment='${field.comment}', nullable=False, default='${field.default}')
    % endif
%endfor

% for field in TABLE.fields:
<%
    FIELD_NAME = field.name     # 字段名
    FIELD_VAR_NAME = FIELD_NAME.replace('F_','')
%>\
    ${FIELD_VAR_NAME.upper()} = '${FIELD_VAR_NAME}' # ${field.comment} 字段别名
% endfor

    # 所有可更新的字段
    UP_COLUMNS = [
% for field in TABLE.fields:
<%
    FIELD_NAME = field.name     # 字段名
    FIELD_VAR_NAME = FIELD_NAME.replace('F_','')
%>\
%if FIELD_VAR_NAME not in TABLE.unique_index and FIELD_VAR_NAME not in ['id', 'create_time']:
        '${FIELD_VAR_NAME}',
%endif
% endfor
    ]