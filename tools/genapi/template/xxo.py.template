<%
import time
from common import PYTHON_VAR_TYPE_DICT
%>\
# -*- coding: utf-8 -*-
"""
The file auto generated by tool genapi, Do not modify.
"""

import json
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
<%
	SORTED_INCLUDE_LIST = list(INFO.include_str_set)
	SORTED_INCLUDE_LIST.sort()
%>\
% for line in SORTED_INCLUDE_LIST:
${line}
% endfor

class ${INFO.name}:
	"""
	${INFO.comment}
	"""
	def __init__(self) -> None:
% for field in INFO.fields:
		self._${field.name} = ${field.init_value}  # ${field.comment}
		self._${field.name}_u = 0  # ${field.comment}设置标识
% endfor
		pass


% for field in INFO.fields:
	# ${field.comment}
	def set_${field.name}(self, ${field.name}):
		self._${field.name} = ${field.name}
		self._${field.name}_u = 1


	@property
	def is_set_${field.name}(self):
		return self._${field.name}_u != 0


	@property
	def ${field.name}(self):
		return self._${field.name}


% endfor
	def to_dict(self) -> dict:
		"""
		Convert object to dict and return
		"""
		data_dict = {}
% for field in INFO.fields:
	% if field.type in PYTHON_VAR_TYPE_DICT.keys():
		data_dict["${field.name}"] = self._${field.name}  # ${field.comment}
	% elif "vector" in field.type:
<%
		BASE_TYPE=field.type.replace("vector", "").replace("<", "").replace(">","")
%>\
		data_dict["${field.name}"] = []
		for node in self._${field.name}:
		% if BASE_TYPE in PYTHON_VAR_TYPE_DICT.keys():
			data_dict["${field.name}"].append(node)  # ${field.comment}
		% else:
			data_dict["${field.name}"].append( node.to_dict() )  # ${field.comment}
		% endif
	% else:
		data_dict["${field.name}"] = self._${field.name}.to_dict()  # ${field.comment}
	%endif
% endfor

		return data_dict


	def to_obj(self, data_dict: dict):
		"""
		Convert dict to object
		"""

		# check params
% for field in INFO.fields:
	% if field.type == "string":
		% if field.min_check:
		if len( data_dict.get("${field.name}") ) < ${field.min}:
			raise Exception("param:${field.name} error, out of range min:${field.min}!")
		% endif
		% if field.max_check:
		if len( data_dict.get("${field.name}") ) > ${field.max}:
			raise Exception("param:${field.name} error, out of range max:${field.max}!")
		% endif
	% else:
		% if field.min_check:
		if data_dict.get("${field.name}") < ${field.min}:
			raise Exception("param:${field.name} error, out of range min:${field.min}!")
		% endif
		% if field.max_check:
		if data_dict.get("${field.name}") > ${field.max}:
			raise Exception("param:${field.name} error, out of range max:${field.max}!")
		% endif
	% endif
% endfor

		# parse params
% for field in INFO.fields:
	% if field.type in PYTHON_VAR_TYPE_DICT.keys():
		self.set_${field.name}( data_dict.get("${field.name}") )  # ${field.comment}
	% elif "vector" in field.type:
<%
		BASE_TYPE=field.type.replace("vector", "").replace("<", "").replace(">","")
%>\
		for node in data_dict.get("${field.name}"):
		% if BASE_TYPE in PYTHON_VAR_TYPE_DICT.keys():
			self._${field.name}.append(node)  # ${field.comment}
			self._${field.name}_u = 1
		% else:
			obj = ${BASE_TYPE}()
			obj.to_obj(node)
			self._${field.name}.append(obj)  # ${field.comment}
			self._${field.name}_u = 1
		% endif
	% else:
		self._${field.name}.to_obj( data_dict.get("${field.name}") )  # ${field.comment}
		self._${field.name}_u = 1
	%endif
% endfor


	def to_json(self):
		"""
		Convert object to object
		"""
		return json.dumps( self.to_dict() )